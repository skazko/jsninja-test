{"version":3,"sources":["src/wysiwig.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.b3db3701.js","sourceRoot":"..","sourcesContent":["interface EditorOptions {\r\n    editor?: string;\r\n    textarea?: string;\r\n    btn_h1?: string;\r\n    btn_h2?: string;\r\n    btn_bold?: string;\r\n    btn_italic?: string;\r\n}\r\n\r\nconst boldText = 'bold-text';\r\nconst italicText = 'italic-text';\r\nconst h1Text = 'header1-text';\r\nconst h2Text = 'header2-text';\r\nconst styles = [h1Text, h2Text];\r\n\r\ntype TextStyle = typeof h1Text | typeof h2Text | null;\r\ntype TextModifier = typeof boldText | typeof italicText;\r\n\r\ninterface Toolbar {\r\n    [boldText]: boolean;\r\n    [italicText]: boolean;\r\n    style: TextStyle;\r\n}\r\n\r\nexport class Editor {\r\n    public editor: HTMLElement;\r\n    public textarea: HTMLElement;\r\n    public btn_h1: HTMLElement;\r\n    public btn_h2: HTMLElement;\r\n    public btn_bold: HTMLElement;\r\n    public btn_italic: HTMLElement;\r\n    public selection: any;\r\n    public toolbar: Toolbar;\r\n    public textdelete: CustomEvent;\r\n    private _toolbar: Toolbar = {\r\n        [boldText]: false,\r\n        [italicText]: false,\r\n        style: null,\r\n    };\r\n\r\n    constructor(options: EditorOptions) {\r\n        this.editor = document.querySelector(options?.editor ?? '.editor');\r\n        this.textarea = this.editor.querySelector(options?.textarea ?? 'textarea');\r\n        this.btn_h1 = this.editor.querySelector(options?.btn_h1 ?? 'btn_h1');\r\n        this.btn_h2 = this.editor.querySelector(options?.btn_h2 ?? 'btn_h2');\r\n        this.btn_bold = this.editor.querySelector(options?.btn_bold ?? 'btn_bold');\r\n        this.btn_italic = this.editor.querySelector(options?.btn_italic ?? 'btn_italic');\r\n        this.selection = null;\r\n        this.textdelete = new CustomEvent('textdelete');\r\n        this.toolbar = new Proxy(this._toolbar, {\r\n            set: (t, p, v, r) => {\r\n                if (p === 'style') {\r\n                    if (v === h1Text) {\r\n                        this.btn_h1.classList.add('active');\r\n                        this.btn_h2.classList.remove('active');\r\n                    }\r\n                    if (v === h2Text) {\r\n                        this.btn_h2.classList.add('active');\r\n                        this.btn_h1.classList.remove('active');\r\n                    }\r\n                    if (v === null) {\r\n                        this.btn_h2.classList.remove('active');\r\n                        this.btn_h1.classList.remove('active');\r\n                    }\r\n                } else {\r\n                    const action: 'add' | 'remove' = v ? 'add' : 'remove';\r\n                    if (p === boldText) {\r\n                        this.btn_bold.classList[action]('active');\r\n                    }\r\n                    if (p === italicText) {\r\n                        this.btn_italic.classList[action]('active');\r\n                    }\r\n                }\r\n\r\n                return Reflect.set(t, p, v, r);\r\n            },\r\n        });\r\n    }\r\n\r\n    init() {\r\n        this.textarea.setAttribute('tabindex', '1');\r\n        this.textarea.setAttribute('contentEditable', 'true');\r\n        this.btn_bold.addEventListener('click', this.makeBold);\r\n        this.btn_italic.addEventListener('click', this.makeItalic);\r\n        this.btn_h1.addEventListener('click', this.applyH1);\r\n        this.btn_h2.addEventListener('click', this.applyH2);\r\n\r\n        document.addEventListener('selectionchange', this.select);\r\n        this.addPStyle();\r\n        this.textarea.addEventListener('focus', () => {\r\n            if (this.textarea.children.length === 0) {\r\n                this.addParagraph();\r\n                const span = this.textarea.lastElementChild.querySelector('span');\r\n                this.moveCaretTo(span);\r\n            }\r\n        });\r\n\r\n        this.textarea.addEventListener('textdelete', () => {\r\n            setTimeout(() => {\r\n                if (this.textarea.innerText == \"\\n\" || this.textarea.innerText === \"\") {\r\n                    this.textarea.innerHTML = '';\r\n                    this.addParagraph();\r\n                } else {\r\n                    const pars = this.textarea.querySelectorAll('.' + Array.from(this.textarea.classList).join('.') + ' .paragraph');\r\n                    pars.forEach(this.wrapText);\r\n                }\r\n            }, 0)\r\n        })\r\n\r\n        // предотвращает удаление первого параграфа и спана внутри\r\n        this.textarea.addEventListener('keydown', (e) => {\r\n            if (this.textarea.innerText === '\\u200b' || this.textarea.innerText.length === 0) {\r\n                if (e.code === 'Backspace') {\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n\r\n            if (e.code === 'Backspace' || e.code === 'Delete') {\r\n                if (this.selection) {\r\n                    this.textarea.dispatchEvent(this.textdelete);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.textarea.addEventListener('keyup', (e) => {\r\n            if (e.code === 'Backspace' || e.code === 'Delete') {\r\n                const pars = this.textarea.querySelectorAll('.paragraph');\r\n                pars.forEach(p => {\r\n                    if (!p.querySelector('span')) {\r\n                        // FIXME подумать как сделать чтобы сохранять курсор \r\n                        this.textarea.dispatchEvent(new CustomEvent('emptyparagraph', {detail: {p} }));\r\n                    }\r\n                })\r\n            }\r\n            \r\n        })\r\n\r\n        this.textarea.addEventListener('emptyparagraph', (e: any) => {\r\n            e.detail.p.remove()\r\n        });\r\n\r\n        this.textarea.addEventListener('blur', () => {\r\n            if (this.textarea.innerText === '\\u200b' || this.textarea.innerText === \"\") {\r\n                this.textarea.innerHTML = '';\r\n            }\r\n        });\r\n\r\n        this.textarea.addEventListener('cut', (e) => {\r\n            this.applyStylesToParagraphs();\r\n            setTimeout(() => {\r\n                this.textarea.dispatchEvent(this.textdelete);\r\n            }, 0)\r\n            \r\n        });\r\n\r\n        this.textarea.addEventListener('paste', (e) => {\r\n            console.log(e.clipboardData.getData('text/html'))\r\n            setTimeout(() => {\r\n                const pars = this.textarea.querySelectorAll('.' + Array.from(this.textarea.classList).join('.') + ' .paragraph');\r\n                pars.forEach(this.upParagraphs);\r\n                pars.forEach(this.wrapText);\r\n                pars.forEach(par => {\r\n                    if (par.textContent.length === 0) {\r\n                        par.remove();\r\n                    }\r\n                })\r\n            }, 50);\r\n        });\r\n\r\n        this.textarea.addEventListener('copy', (e) => {\r\n            this.applyStylesToParagraphs();\r\n        })\r\n    }\r\n\r\n    upParagraphs = (par) => {\r\n        let last = par;\r\n        par.querySelectorAll('.paragraph').forEach(p => {\r\n            console.log(p)\r\n            last.after(p);\r\n            last = p\r\n        })\r\n    }\r\n    wrapText = (par) => {\r\n        par.childNodes.forEach(n => {\r\n            if (n.nodeType === 3) {\r\n                const span = document.createElement('span');\r\n                span.innerText = n.textContent;\r\n                n.replaceWith(span);\r\n            }\r\n        })\r\n    }\r\n\r\n    addParagraph = () => {\r\n        const div = document.createElement('div');\r\n        const span = document.createElement('span');\r\n        span.innerHTML = '&#8203;';\r\n        div.appendChild(span);\r\n        div.classList.add('paragraph');\r\n        this.textarea.appendChild(div);\r\n    };\r\n\r\n    addPStyle() {\r\n        const style = document.createElement('style');\r\n        style.innerHTML = '.paragraph {font-size: 1rem;}';\r\n        document.head.append(style);\r\n    }\r\n\r\n    moveCaretTo(node: HTMLSpanElement): void {\r\n        const range = document.createRange();\r\n        range.selectNodeContents(node);\r\n        range.collapse(true);\r\n        const sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n\r\n    select = () => {\r\n        const selection = document.getSelection();\r\n        // console.log(selection)\r\n        if (this.textarea.contains(selection.anchorNode)) {\r\n            if (selection.isCollapsed) {\r\n                const span = selection.anchorNode.parentElement;\r\n\r\n                if (span && span.nodeName === 'SPAN') {\r\n                    // выделение кнопок\r\n                    this.toolbar[boldText] = span.classList.contains(boldText);\r\n                    this.toolbar[italicText] = span.classList.contains(italicText);\r\n\r\n                    const p = span.closest('.paragraph');\r\n\r\n                    this.toolbar.style = p.classList.contains(h1Text)\r\n                        ? h1Text\r\n                        : p.classList.contains(h2Text)\r\n                        ? h2Text\r\n                        : null;\r\n                }\r\n                \r\n\r\n                if (this.selection) {\r\n                    this.selection = null;\r\n                }\r\n            } else {\r\n                this.selection = selection;\r\n\r\n                const container = selection.getRangeAt(0).commonAncestorContainer;\r\n\r\n                // выделение кнопок\r\n                if (container.nodeType === 3) {\r\n                    const span = container.parentElement;\r\n                    this.toolbar[boldText] = span.classList.contains(boldText);\r\n                    this.toolbar[italicText] = span.classList.contains(italicText);\r\n\r\n                    const p = span.closest('.paragraph');\r\n                    \r\n                    this.toolbar.style = p.classList.contains(h1Text)\r\n                        ? h1Text\r\n                        : p.classList.contains(h2Text)\r\n                        ? h2Text\r\n                        : null;\r\n\r\n                } else if (container.nodeName === 'SPAN') {\r\n                    this.toolbar[boldText] = (container as HTMLElement).classList.contains(boldText);\r\n                    this.toolbar[italicText] = (container as HTMLElement).classList.contains(italicText);\r\n                    \r\n                    const p = (container as HTMLElement).closest('.paragraph');\r\n\r\n                    this.toolbar.style = p.classList.contains(h1Text)\r\n                        ? h1Text\r\n                        : p.classList.contains(h2Text)\r\n                        ? h2Text\r\n                        : null;\r\n                } else {\r\n                    const fr = this.selection.getRangeAt(0).cloneContents();\r\n                    const spans = fr.querySelectorAll('span');\r\n                    const spansAr = Array.from(spans);\r\n\r\n                    this.toolbar[boldText] = spansAr.length > 0 && spansAr.every((span) =>\r\n                        (span as HTMLElement).classList.contains(boldText)\r\n                    );\r\n                    this.toolbar[italicText] = spansAr.length > 0 && spansAr.every((span) =>\r\n                        (span as HTMLElement).classList.contains(italicText)\r\n                    );\r\n\r\n                    if ((container as HTMLElement).classList.contains('paragraph')) {\r\n                        const p = container as HTMLElement;\r\n\r\n                        this.toolbar.style = p.classList.contains(h1Text)\r\n                            ? h1Text\r\n                            : p.classList.contains(h2Text)\r\n                            ? h2Text\r\n                            : null;\r\n                    } else {\r\n                        const paragraphs = new Set<HTMLElement>();\r\n                        spans.forEach(span => {\r\n                            paragraphs.add(span.closest('.paragraph'))\r\n                        });\r\n\r\n                        const ar = Array.from(paragraphs);\r\n\r\n                        this.toolbar.style = ar.every((p) => p.classList.contains(h1Text))\r\n                            ? h1Text\r\n                            : ar.every((p) => p.classList.contains(h2Text))\r\n                            ? h2Text\r\n                            : null;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.selection) {\r\n                this.selection = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    applyModifier = (mod: TextModifier) => () => {\r\n        const spans = this.processSelection();\r\n        const isAllSelectedSpansModified = spans.every((span) => span.classList.contains(mod));\r\n\r\n        if (isAllSelectedSpansModified) {\r\n            spans.forEach((span) => span.classList.toggle(mod));\r\n            this.toolbar[mod] = !this.toolbar[mod];\r\n        } else {\r\n            spans.forEach((span) => span.classList.add(mod));\r\n            this.toolbar[mod] = true;\r\n        }\r\n    };\r\n\r\n    makeBold = this.applyModifier(boldText);\r\n    makeItalic = this.applyModifier(italicText);\r\n\r\n    applyStyle = (style: TextStyle) => () => {\r\n        const spans = this.processSelection();\r\n\r\n        if (spans[0] !== spans[0].closest('.paragraph').firstElementChild) {\r\n            const parToSplit = spans[0].closest('.paragraph');\r\n            const newPar = document.createElement('div');\r\n            newPar.classList.add('paragraph')\r\n            parToSplit.after(newPar);\r\n            parToSplit.childNodes.forEach(ch => {\r\n                if (spans.includes(ch as HTMLElement)) {\r\n                    newPar.append(ch);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (spans[spans.length - 1] !== spans[spans.length - 1].closest('.paragraph').lastElementChild) {\r\n            const parToSplit = spans[spans.length - 1].closest('.paragraph');\r\n            const newPar = document.createElement('div');\r\n            newPar.classList.add('paragraph')\r\n            parToSplit.before(newPar);\r\n            parToSplit.childNodes.forEach(ch => {\r\n                if (spans.includes(ch as HTMLElement)) {\r\n                    newPar.append(ch);\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        const paragraphs = new Set<HTMLElement>();\r\n        spans.forEach(span => {\r\n            paragraphs.add(span.closest('.paragraph'))\r\n        });\r\n\r\n        const ar = Array.from(paragraphs);\r\n\r\n        const isStyled = ar.every((p) => p.classList.contains(style));\r\n        const filteredStyles = styles.filter((s) => s !== style);\r\n\r\n        if (isStyled) {\r\n            ar.forEach((p) => p.classList.toggle(style));\r\n            this.toolbar.style = null;\r\n        } else {\r\n            ar.forEach((p) => {\r\n                filteredStyles.forEach((fStyle) => p.classList.remove(fStyle));\r\n                p.classList.add(style);\r\n                this.toolbar.style = style;\r\n            });\r\n        }\r\n    };\r\n\r\n    applyH1 = this.applyStyle(h1Text);\r\n    applyH2 = this.applyStyle(h2Text);\r\n\r\n    processSelection(): HTMLElement[] {\r\n        const selection = this.selection;\r\n        const range: Range = selection.getRangeAt(0);\r\n        const output: HTMLElement[] = [];\r\n\r\n        if (range.startContainer === range.endContainer) {\r\n            // выделение внутри одного узла\r\n            if (range.startContainer.nodeType === 3) {\r\n                // выделили текстовый узел\r\n                if (range.startOffset === 0 && range.endOffset === (range.endContainer as Text).length) {\r\n                    // выделен весь узел полностью\r\n                    // все текстовые узлы должны быть в спанах\r\n                    let span = range.startContainer.parentElement;\r\n                    output.push(span);\r\n                } else {\r\n                    // узел выделен не полностью разбить на спаны\r\n                    const span = range.startContainer.parentElement;\r\n                    const mSpan = splitSpan(span, range.startOffset, range.endOffset);\r\n                    output.push(mSpan);\r\n                }\r\n            } else {\r\n                // выделен либо span либо параграф\r\n                if (range.startContainer.nodeName === 'SPAN') {\r\n                    output.push(range.startContainer as HTMLElement);\r\n                } else if ((range.startContainer as HTMLElement).classList.contains('paragraph')) {\r\n                    for (let i = range.startOffset; i < range.endOffset; i++) {\r\n                        output.push((range.startContainer as HTMLElement).children.item(i) as HTMLElement);\r\n                    }\r\n                }\r\n\r\n                // TODO: добавить проверку на див\r\n            }\r\n        } else {\r\n            // выделение в разных узлах\r\n            const wrap = range.commonAncestorContainer as HTMLElement;\r\n            // wrap должен быть либо .paragraph либо textarea;\r\n            // FIXME hardcode\r\n            if (wrap.classList.contains('paragraph')) {\r\n                output.push(...getSpans(wrap, range));\r\n            }\r\n\r\n            // FIXME hardcode\r\n            if (wrap.classList.contains('edit-area')) {\r\n                // внутри textarea должны быть только параграфы\r\n                let firstP: HTMLElement;\r\n                let lastP: HTMLElement;\r\n\r\n                if (range.startContainer.nodeType === 3) {\r\n                    const el = range.startContainer.parentElement;\r\n                    if (el.classList.contains('paragraph')) {\r\n                        firstP = el;\r\n                    } else {\r\n                        firstP = el.closest('.paragraph');\r\n                    }\r\n                } else {\r\n                    if ((range.startContainer as HTMLElement).classList.contains('paragraph')) {\r\n                        firstP = range.startContainer as HTMLElement;\r\n                    } else {\r\n                        firstP = (range.startContainer as HTMLElement).closest('.paragraph');\r\n                    }\r\n                }\r\n\r\n                if (range.endContainer.nodeType === 3) {\r\n                    const el = range.endContainer.parentElement;\r\n                    if (el.classList.contains('paragraph')) {\r\n                        lastP = el;\r\n                    } else {\r\n                        lastP = el.closest('.paragraph');\r\n                    }\r\n                } else {\r\n                    if ((range.endContainer as HTMLElement).classList.contains('paragraph')) {\r\n                        lastP = range.endContainer as HTMLElement;\r\n                    } else {\r\n                        lastP = (range.endContainer as HTMLElement).closest('.paragraph');\r\n                    }\r\n                }\r\n\r\n                let next = firstP;\r\n\r\n                while (next && next !== lastP) {\r\n                    output.push(...getSpans(next, range));\r\n                    next = next.nextElementSibling as HTMLElement;\r\n                }\r\n\r\n                output.push(...getSpans(lastP, range));\r\n            }\r\n        }\r\n\r\n        const newRange = new Range();\r\n        newRange.setStartBefore(output[0]);\r\n        newRange.setEndAfter(output[output.length - 1]);\r\n\r\n        const sel = document.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(newRange);\r\n\r\n        return output;\r\n    }\r\n\r\n    applyStylesToParagraphs() {\r\n        document.querySelectorAll('.paragraph').forEach(p => {\r\n            const computedProps = getComputedStyle(p);\r\n\r\n            getAppliedStyleProps(p as HTMLElement).forEach(prop => {\r\n                (p as HTMLElement).style[prop] = computedProps[prop];\r\n            });\r\n            \r\n        })\r\n    }\r\n}\r\n\r\nfunction splitSpan(span: HTMLElement, startOffset: number, endOffset: number): HTMLElement {\r\n    let fSpan: Node;\r\n    let mSpan: HTMLElement = span.cloneNode(true) as HTMLElement; // выделенный спан\r\n    let lSpan: Node;\r\n\r\n    // выделение не сначала\r\n    if (startOffset !== 0) {\r\n        fSpan = span.cloneNode(true);\r\n        (fSpan.firstChild as Text).splitText(startOffset);\r\n        fSpan.lastChild.remove();\r\n\r\n        (mSpan.firstChild as Text).splitText(startOffset);\r\n        mSpan.firstChild.remove();\r\n    }\r\n\r\n    // выделение не до конца\r\n    if (endOffset !== (span.firstChild as Text).length) {\r\n        (mSpan.firstChild as Text).splitText(endOffset - startOffset);\r\n        mSpan.lastChild.remove();\r\n\r\n        lSpan = span.cloneNode(true);\r\n        (lSpan.firstChild as Text).splitText(endOffset);\r\n        lSpan.firstChild.remove();\r\n    }\r\n\r\n    const spans = [fSpan, mSpan, lSpan].filter((span) => {\r\n        return typeof span !== 'undefined' && span.textContent !== \"\\n\" && span.textContent !== \"\\u200b\"\r\n    });\r\n    span.replaceWith(...spans);\r\n\r\n    return mSpan;\r\n}\r\n\r\nfunction getSpans(wrap: HTMLElement, range: Range): HTMLElement[] {\r\n    const output: HTMLElement[] = [];\r\n    const startContainer = range.startContainer;\r\n    const endContainer = range.endContainer;\r\n    let startSpan: HTMLElement;\r\n    let endSpan: HTMLElement;\r\n\r\n    if (wrap.contains(startContainer)) {\r\n        if (startContainer.nodeType === 3) {\r\n            startSpan = splitSpan(startContainer.parentElement, range.startOffset, (startContainer as Text).length);\r\n        } else {\r\n            if (startContainer.nodeName === 'SPAN') {\r\n                startSpan = startContainer as HTMLElement;\r\n            } else {\r\n                startSpan = (startContainer as HTMLElement).querySelector('span');\r\n            }\r\n            // другие варианты?\r\n        }\r\n        output.push(startSpan);\r\n    }\r\n\r\n    if (wrap.contains(endContainer)) {\r\n        if (endContainer.nodeType === 3) {\r\n            endSpan = splitSpan(endContainer.parentElement, 0, range.endOffset);\r\n        } else {\r\n            if (endContainer.nodeName === 'SPAN') {\r\n                endSpan = endContainer as HTMLElement;\r\n            } else {\r\n                endSpan = (endContainer as HTMLElement).querySelector('span:last-child');\r\n            }\r\n            // другие варианты?\r\n        }\r\n    }\r\n\r\n    let next = (startSpan ? startSpan.nextElementSibling : wrap.firstElementChild) as HTMLElement;\r\n\r\n    while (next && next !== endSpan) {\r\n        output.push(next);\r\n        next = next.nextElementSibling as HTMLElement;\r\n    }\r\n\r\n    if (endSpan) {\r\n        output.push(endSpan);\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nfunction getAppliedStyleProps(el: HTMLElement): Array<string> {\r\n    const appliedRules = new Set<string>();\r\n    for (let i = 0; i < document.styleSheets.length; i++) {\r\n        const rules = document.styleSheets[i].cssRules;\r\n        for (let j = 0; j < rules.length; j++) {\r\n            const rule = rules[j] as CSSStyleRule;\r\n            if (el.matches(rule.selectorText)) {\r\n                for (let k = 0; k < rule.style.length; k++) {\r\n                    const styleProp = rule.style[k];\r\n                    appliedRules.add(styleProp);\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    return Array.from(appliedRules);\r\n}\r\n","import {Editor} from './wysiwig';\r\n\r\nconst editor = new Editor({\r\n    editor: '.editor',\r\n    textarea: '.edit-area',\r\n    btn_h1: '.head-1',\r\n    btn_h2: '.head-2',\r\n    btn_bold: '.bold',\r\n    btn_italic: '.italic',\r\n});\r\n\r\neditor.init();\r\n"]}